#include <Servo.h>
Servo servo;
int lf = 9;
int lb = 10;
int rf = 5;
int rb = 6;
long duration , duration1 , duration2 , distance, rightdistance, leftdistance;
#define echopin 2
#define trigpin 3
void setup() {
  Serial.begin(9600);
  pinMode(lf, OUTPUT);
  pinMode(lb, OUTPUT);
  pinMode(rf, OUTPUT);
  pinMode(rb, OUTPUT);
  pinMode(trigpin, OUTPUT);
  pinMode(echopin, INPUT);
  servo.attach(13);
  servo.write(90);

}

void loop() {
  servo.write(90);
  Serial.println("servo at 90");
  delay(200);
  measure_distance();
  Serial.print("distance  ");
  Serial.println(distance);
  if (distance <= 25)
  {
    go_backward();
    Serial.println("going backward");
    delay(950);
    turn_off();
    Serial.println("turned off");
    delay(500);
    servo.write(0);
    Serial.println("servo at 0");
    delay(50);
    measure_rightdistance();
    Serial.print("right distance ");
    Serial.println(rightdistance);
    delay(1000);
    servo.write(180);
    Serial.println("servo at 180");
    delay(50);
    measure_leftdistance();
    Serial.print("left distance ");
    Serial.println(leftdistance);
    delay(1000);
    servo.write(90);
    Serial.println("servo at 90");
    delay(200);

    if (rightdistance > leftdistance)
    {
      turn_right();
      Serial.println("turning right");
      delay(1000);
    }
    if (rightdistance < leftdistance) {
      turn_left();
      Serial.println("turning left");
      delay(1000);
    }

  }
  else {
    go_forward();
    Serial.println("going forward");
    delay(15);
    Serial.println("going forward");
  }
}
void go_forward() {
  digitalWrite(lf, HIGH);
  digitalWrite(lb, LOW);
  digitalWrite(rf, HIGH);
  digitalWrite(rb, LOW);
}
void go_backward() {
  digitalWrite(lf, LOW);
  digitalWrite(lb, HIGH);
  digitalWrite(rf, LOW);
  digitalWrite(rb, HIGH);

}
void turn_right() {
  digitalWrite(lf, HIGH);
  digitalWrite(lb, LOW);
  digitalWrite(rf, LOW);
  digitalWrite(rb, LOW);

}
void turn_left() {
  digitalWrite(lf, LOW);
  digitalWrite(lb, LOW);
  digitalWrite(rf, HIGH);
  digitalWrite(rb, LOW);

}
void turn_off() {
  digitalWrite(lf, LOW);
  digitalWrite(lb, LOW);
  digitalWrite(rf, LOW);
  digitalWrite(rb, LOW);

}
void measure_distance()
{
  digitalWrite(trigpin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigpin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigpin, LOW);
  duration = pulseIn(echopin, HIGH);
  distance = (duration / 2) / 29.1;
}
void measure_rightdistance()
{
  digitalWrite(trigpin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigpin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigpin, LOW);
  duration1 = pulseIn(echopin, HIGH);
  rightdistance = (duration1 / 2) / 29.1;
}
void measure_leftdistance()
{
  digitalWrite(trigpin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigpin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigpin, LOW);
  duration2 = pulseIn(echopin, HIGH);
  leftdistance = (duration2 / 2) / 29.1;
}
